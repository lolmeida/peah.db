name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: lolmeida/peah-db

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: mvn clean test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      run: |
        mvn clean package \
          -Dquarkus.container-image.build=true \
          -Dquarkus.container-image.push=true \
          -Dquarkus.container-image.tag=${{ github.sha }} \
          -Dquarkus.container-image.additional-tags=latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'v1.33.2'
    
    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: 'v3.15.4'
        
    - name: Setup SSH connection
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        
    - name: Setup kubeconfig via SSH tunnel
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -L 16443:localhost:16443 -N -f ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
        kubectl config set-cluster microk8s-cluster --server=https://localhost:16443
        
    - name: Wait for image to be available
      run: |
        echo "Waiting for image to be available..."
        sleep 30
        
    - name: Deploy to Kubernetes
      run: |
        helm upgrade --install peah-db ./k8s \
          --namespace lolmeida \
          --create-namespace \
          --set image.tag=${{ github.sha }} \
          --wait --timeout=300s
          
    - name: Verify deployment
      run: |
        kubectl get pods -n lolmeida -l app.kubernetes.io/name=k8s
        kubectl rollout status deployment/peah-db-k8s -n lolmeida --timeout=300s
        
    - name: Test health endpoint
      run: |
        sleep 30
        curl -f https://peah-db.lolmeida.com/q/health || exit 1