{{- $deployments := list -}}

{{- if .Values.n8n.enabled -}}
{{- $n8nEnv := list
  (dict "name" "TZ" "value" .Values.global.timezone)
  (dict "name" "GENERIC_TIMEZONE" "value" .Values.global.timezone)
  (dict "name" "N8N_BASIC_AUTH_ACTIVE" "value" (.Values.n8n.auth.enabled | toString))
  (dict "name" "N8N_BASIC_AUTH_USER" "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-secret" (include "n8n.fullname" .)) "key" "n8n-auth-username")))
  (dict "name" "N8N_BASIC_AUTH_PASSWORD" "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-secret" (include "n8n.fullname" .)) "key" "n8n-auth-password")))
  (dict "name" "WEBHOOK_URL" "value" .Values.n8n.config.webhookUrl)
  (dict "name" "N8N_EDITOR_BASE_URL" "value" .Values.n8n.config.editorBaseUrl)
  (dict "name" "N8N_PROTOCOL" "value" .Values.n8n.config.protocol)
  (dict "name" "N8N_HOST" "value" .Values.n8n.config.domain)
-}}
{{- if .Values.postgresql.enabled -}}
{{- $n8nEnv = append $n8nEnv (dict "name" "DB_TYPE" "value" "postgresdb") -}}
{{- $n8nEnv = append $n8nEnv (dict "name" "DB_POSTGRESDB_HOST" "value" (printf "%s-postgres" (include "n8n.fullname" .))) -}}
{{- $n8nEnv = append $n8nEnv (dict "name" "DB_POSTGRESDB_PORT" "value" "5432") -}}
{{- $n8nEnv = append $n8nEnv (dict "name" "DB_POSTGRESDB_DATABASE" "value" .Values.postgresql.auth.database) -}}
{{- $n8nEnv = append $n8nEnv (dict "name" "DB_POSTGRESDB_USER" "value" .Values.postgresql.auth.username) -}}
{{- $n8nEnv = append $n8nEnv (dict "name" "DB_POSTGRESDB_PASSWORD" "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-secret" (include "n8n.fullname" .)) "key" "postgres-password"))) -}}
{{- else if .Values.mysql.enabled -}}
{{- $n8nEnv = append $n8nEnv (dict "name" "DB_TYPE" "value" "mysqldb") -}}
{{- $n8nEnv = append $n8nEnv (dict "name" "DB_MYSQLDB_HOST" "value" (printf "%s-mysql" (include "n8n.fullname" .))) -}}
{{- $n8nEnv = append $n8nEnv (dict "name" "DB_MYSQLDB_PORT" "value" "3306") -}}
{{- $n8nEnv = append $n8nEnv (dict "name" "DB_MYSQLDB_DATABASE" "value" .Values.mysql.auth.database) -}}
{{- $n8nEnv = append $n8nEnv (dict "name" "DB_MYSQLDB_USER" "value" .Values.mysql.auth.username) -}}
{{- $n8nEnv = append $n8nEnv (dict "name" "DB_MYSQLDB_PASSWORD" "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-secret" (include "n8n.fullname" .)) "key" "mysql-password"))) -}}
{{- end -}}
{{- if .Values.redis.enabled -}}
{{- $n8nEnv = append $n8nEnv (dict "name" "QUEUE_BULL_REDIS_HOST" "value" (printf "%s-redis" (include "n8n.fullname" .))) -}}
{{- $n8nEnv = append $n8nEnv (dict "name" "QUEUE_BULL_REDIS_PORT" "value" "6379") -}}
{{- $n8nEnv = append $n8nEnv (dict "name" "QUEUE_BULL_REDIS_PASSWORD" "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-secret" (include "n8n.fullname" .)) "key" "redis-password"))) -}}
{{- end -}}
{{- $deployments = append $deployments (dict
  "name" "n8n"
  "component" "n8n"
  "enabled" (and .Values.n8n.enabled .Values.deployments.n8n.enabled)
  "replicaCount" .Values.deployments.n8n.replicaCount
  "image" .Values.deployments.n8n.image
  "port" (dict "name" "http" "containerPort" 5678)
  "resources" .Values.deployments.n8n.resources
  "persistence" .Values.persistence.n8n
  "volumeMount" (dict "name" "n8n-data" "mountPath" "/home/node/.n8n")
  "env" $n8nEnv
  "livenessProbe" (dict
    "httpGet" (dict "path" "/healthz" "port" "http")
    "initialDelaySeconds" 30
    "periodSeconds" 10
  )
  "readinessProbe" (dict
    "httpGet" (dict "path" "/healthz" "port" "http")
    "initialDelaySeconds" 15
    "periodSeconds" 5
  )
) -}}
{{- end -}}

{{- if .Values.mysql.enabled -}}
{{- $deployments = append $deployments (dict
  "name" "mysql"
  "component" "mysql"
  "enabled" (and .Values.mysql.enabled .Values.deployments.mysql.enabled)
  "replicaCount" .Values.deployments.mysql.replicaCount
  "image" .Values.deployments.mysql.image
  "port" (dict "name" "mysql" "containerPort" 3306)
  "resources" .Values.deployments.mysql.resources
  "persistence" .Values.persistence.mysql
  "volumeMount" (dict "name" "mysql-data" "mountPath" "/var/lib/mysql")
  "env" (list
    (dict "name" "TZ" "value" .Values.global.timezone)
    (dict "name" "MYSQL_DATABASE" "value" .Values.mysql.auth.database)
    (dict "name" "MYSQL_USER" "value" .Values.mysql.auth.username)
    (dict "name" "MYSQL_PASSWORD" "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-secret" (include "n8n.fullname" .)) "key" "mysql-password")))
    (dict "name" "MYSQL_ROOT_PASSWORD" "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-secret" (include "n8n.fullname" .)) "key" "mysql-root-password")))
  )
  "livenessProbe" (dict
    "exec" (dict "command" (list "/bin/sh" "-c" "exec mysqladmin ping -h localhost -u root -p$MYSQL_ROOT_PASSWORD"))
    "initialDelaySeconds" 30
    "periodSeconds" 10
  )
  "readinessProbe" (dict
    "exec" (dict "command" (list "/bin/sh" "-c" "-e" "exec mysqladmin ping -h localhost -u root -p$MYSQL_ROOT_PASSWORD"))
    "initialDelaySeconds" 5
    "periodSeconds" 5
  )
) -}}
{{- end -}}

{{- if .Values.postgresql.enabled -}}
{{- $deployments = append $deployments (dict
  "name" "postgres"
  "component" "postgres"
  "enabled" (and .Values.postgresql.enabled .Values.deployments.postgresql.enabled)
  "replicaCount" .Values.deployments.postgresql.replicaCount
  "image" .Values.deployments.postgresql.image
  "port" (dict "name" "postgres" "containerPort" 5432)
  "resources" .Values.deployments.postgresql.resources
  "persistence" .Values.persistence.postgresql
  "volumeMount" (dict "name" "postgres-data" "mountPath" "/var/lib/postgresql/data")
  "env" (list
    (dict "name" "TZ" "value" .Values.global.timezone)
    (dict "name" "POSTGRES_DB" "value" .Values.postgresql.auth.database)
    (dict "name" "POSTGRES_USER" "value" .Values.postgresql.auth.username)
    (dict "name" "POSTGRES_PASSWORD" "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-secret" (include "n8n.fullname" .)) "key" "postgres-password")))
    (dict "name" "PGDATA" "value" "/var/lib/postgresql/data/pgdata")
  )
  "livenessProbe" (dict
    "exec" (dict "command" (list "/bin/sh" "-c" (printf "exec pg_isready -U %s -d %s" .Values.postgresql.auth.username .Values.postgresql.auth.database)))
    "initialDelaySeconds" 30
    "periodSeconds" 10
  )
  "readinessProbe" (dict
    "exec" (dict "command" (list "/bin/sh" "-c" "-e" (printf "exec pg_isready -U %s -d %s" .Values.postgresql.auth.username .Values.postgresql.auth.database)))
    "initialDelaySeconds" 5
    "periodSeconds" 5
  )
) -}}
{{- end -}}

{{- if .Values.redis.enabled -}}
{{- $deployments = append $deployments (dict
  "name" "redis"
  "component" "redis"
  "enabled" (and .Values.redis.enabled .Values.deployments.redis.enabled)
  "replicaCount" .Values.deployments.redis.replicaCount
  "image" .Values.deployments.redis.image
  "port" (dict "name" "redis" "containerPort" 6379)
  "resources" .Values.deployments.redis.resources
  "persistence" .Values.persistence.redis
  "volumeMount" (dict "name" "redis-data" "mountPath" "/data")
  "command" (list "redis-server" "--requirepass" "$(REDIS_PASSWORD)" "--appendonly" "yes")
  "env" (list
    (dict "name" "TZ" "value" .Values.global.timezone)
    (dict "name" "REDIS_PASSWORD" "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-secret" (include "n8n.fullname" .)) "key" "redis-password")))
  )
  "livenessProbe" (dict
    "exec" (dict "command" (list "redis-cli" "ping"))
    "initialDelaySeconds" 30
    "periodSeconds" 10
  )
  "readinessProbe" (dict
    "exec" (dict "command" (list "redis-cli" "ping"))
    "initialDelaySeconds" 5
    "periodSeconds" 5
  )
) -}}
{{- end -}}

{{- if .Values.monitoring.grafana.enabled -}}
{{- $deployments = append $deployments (dict
  "name" "grafana"
  "component" "grafana"
  "enabled" (and .Values.monitoring.grafana.enabled .Values.deployments.grafana.enabled)
  "replicaCount" .Values.deployments.grafana.replicaCount
  "image" .Values.deployments.grafana.image
  "port" (dict "name" "http" "containerPort" 3000)
  "resources" .Values.deployments.grafana.resources
  "persistence" .Values.persistence.grafana
  "volumeMount" (dict "name" "grafana-data" "mountPath" "/var/lib/grafana")
  "extraVolumeMounts" (list
    (dict "name" "grafana-config" "mountPath" "/etc/grafana/grafana.ini" "subPath" "grafana.ini")
    (dict "name" "grafana-config" "mountPath" "/etc/grafana/provisioning/datasources/datasources.yaml" "subPath" "datasources.yaml")
    (dict "name" "grafana-config" "mountPath" "/etc/grafana/provisioning/dashboards/dashboards.yaml" "subPath" "dashboards.yaml")
    (dict "name" "grafana-dashboards" "mountPath" "/var/lib/grafana/dashboards")
  )
  "extraVolumes" (list
    (dict "name" "grafana-config" "configMap" (dict "name" (printf "%s-grafana-config" (include "n8n.fullname" .))))
    (dict "name" "grafana-dashboards" "configMap" (dict "name" (printf "%s-grafana-dashboards" (include "n8n.fullname" .))))
  )
  "env" (list
    (dict "name" "TZ" "value" .Values.global.timezone)
    (dict "name" "GF_SECURITY_ADMIN_USER" "value" .Values.monitoring.grafana.auth.adminUser)
    (dict "name" "GF_SECURITY_ADMIN_PASSWORD" "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-secret" (include "n8n.fullname" .)) "key" "grafana-admin-password")))
  )
  "livenessProbe" (dict
    "httpGet" (dict "path" "/api/health" "port" "http")
    "initialDelaySeconds" 30
    "periodSeconds" 10
  )
  "readinessProbe" (dict
    "httpGet" (dict "path" "/api/health" "port" "http")
    "initialDelaySeconds" 15
    "periodSeconds" 5
  )
) -}}
{{- end -}}

{{- if .Values.monitoring.prometheus.enabled -}}
{{- $deployments = append $deployments (dict
  "name" "prometheus"
  "component" "prometheus"
  "enabled" (and .Values.monitoring.prometheus.enabled .Values.deployments.prometheus.enabled)
  "replicaCount" .Values.deployments.prometheus.replicaCount
  "image" .Values.deployments.prometheus.image
  "port" (dict "name" "http" "containerPort" 9090)
  "resources" .Values.deployments.prometheus.resources
  "persistence" .Values.persistence.prometheus
  "volumeMount" (dict "name" "prometheus-data" "mountPath" "/prometheus")
  "extraVolumeMounts" (list
    (dict "name" "prometheus-config" "mountPath" "/etc/prometheus/prometheus.yml" "subPath" "prometheus.yml")
  )
  "extraVolumes" (list
    (dict "name" "prometheus-config" "configMap" (dict "name" (printf "%s-prometheus-config" (include "n8n.fullname" .))))
  )
  "serviceAccountName" (printf "%s-prometheus" (include "n8n.fullname" .))
  "args" (list
    "--config.file=/etc/prometheus/prometheus.yml"
    "--storage.tsdb.path=/prometheus"
    "--web.console.libraries=/etc/prometheus/console_libraries"
    "--web.console.templates=/etc/prometheus/consoles"
    (printf "--storage.tsdb.retention.time=%s" .Values.monitoring.prometheus.retention)
    "--web.enable-lifecycle"
  )
  "env" (list
    (dict "name" "TZ" "value" .Values.global.timezone)
  )
  "livenessProbe" (dict
    "httpGet" (dict "path" "/-/healthy" "port" "http")
    "initialDelaySeconds" 30
    "periodSeconds" 10
  )
  "readinessProbe" (dict
    "httpGet" (dict "path" "/-/ready" "port" "http")
    "initialDelaySeconds" 15
    "periodSeconds" 5
  )
) -}}
{{- end -}}

{{- range $deployment := $deployments }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "n8n.fullname" $ }}-{{ $deployment.name }}
  labels:
    {{- include "n8n.labels" $ | nindent 4 }}
    app.kubernetes.io/component: {{ $deployment.component }}
spec:
  replicas: {{ $deployment.replicaCount }}
  selector:
    matchLabels:
      {{- include "n8n.selectorLabels" $ | nindent 6 }}
      app.kubernetes.io/component: {{ $deployment.component }}
  template:
    metadata:
      labels:
        {{- include "n8n.selectorLabels" $ | nindent 8 }}
        app.kubernetes.io/component: {{ $deployment.component }}
    spec:
      {{- if $deployment.serviceAccountName }}
      serviceAccountName: {{ $deployment.serviceAccountName }}
      {{- end }}
      containers:
        - name: {{ $deployment.name }}
          image: "{{ $deployment.image.repository }}:{{ $deployment.image.tag }}"
          imagePullPolicy: {{ $deployment.image.pullPolicy }}
          ports:
            - name: {{ $deployment.port.name }}
              containerPort: {{ $deployment.port.containerPort }}
              protocol: TCP
          {{- if $deployment.command }}
          command:
            {{- range $deployment.command }}
            - {{ . | quote }}
            {{- end }}
          {{- end }}
          {{- if $deployment.args }}
          args:
            {{- range $deployment.args }}
            - {{ . | quote }}
            {{- end }}
          {{- end }}
          env:
            {{- range $deployment.env }}
            - name: {{ .name }}
              {{- if .value }}
              value: {{ .value | quote }}
              {{- else if .valueFrom }}
              valueFrom:
                {{- toYaml .valueFrom | nindent 16 }}
              {{- end }}
            {{- end }}
          resources:
            {{- toYaml $deployment.resources | nindent 12 }}
          volumeMounts:
            - name: {{ $deployment.volumeMount.name }}
              mountPath: {{ $deployment.volumeMount.mountPath }}
            {{- if $deployment.extraVolumeMounts }}
            {{- range $deployment.extraVolumeMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              {{- if .subPath }}
              subPath: {{ .subPath }}
              {{- end }}
            {{- end }}
            {{- end }}
          livenessProbe:
            {{- toYaml $deployment.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml $deployment.readinessProbe | nindent 12 }}
      volumes:
        - name: {{ $deployment.volumeMount.name }}
          {{- if $deployment.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "n8n.fullname" $ }}-{{ $deployment.name }}-pvc
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- if $deployment.extraVolumes }}
        {{- range $deployment.extraVolumes }}
        - name: {{ .name }}
          {{- if .configMap }}
          configMap:
            name: {{ .configMap.name }}
          {{- else if .emptyDir }}
          emptyDir: {}
          {{- end }}
        {{- end }}
        {{- end }}
      {{- with $.Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }} 